//
// moduleType.cs.cs
//
// This file was generated by XMLSPY 5 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Xml;
using Altova.Types;

namespace modullist
{
	public class moduleType : Altova.Node
	{
		#region Forward constructors
		public moduleType() : base() {}
		public moduleType(XmlDocument doc) : base(doc) {}
		public moduleType(XmlNode node) : base(node) {}
		public moduleType(Altova.Node node) : base(node) {}
		#endregion // Forward constructors

		#region filename accessor methods
		public int GetfilenameMinCount()
		{
			return 1;
		}

		public int GetfilenameMaxCount()
		{
			return 1;
		}

		public int GetfilenameCount()
		{
			return DomChildCount(NodeType.Attribute, "", "filename");
		}

		public bool Hasfilename()
		{
			return HasDomChild(NodeType.Attribute, "", "filename");
		}

		public filenameType GetfilenameAt(int index)
		{
			return new filenameType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "filename", index)));
		}

		public filenameType Getfilename()
		{
			return GetfilenameAt(0);
		}

		public void RemovefilenameAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "filename", index);
		}

		public void Removefilename()
		{
			while (Hasfilename())
				RemovefilenameAt(0);
		}

		public void Addfilename(filenameType newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "filename", newValue.ToString());
		}

		public void InsertfilenameAt(filenameType newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "filename", index, newValue.ToString());
		}

		public void ReplacefilenameAt(filenameType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "filename", index, newValue.ToString());
		}
		#endregion // filename accessor methods

		#region identifier accessor methods
		public int GetidentifierMinCount()
		{
			return 1;
		}

		public int GetidentifierMaxCount()
		{
			return 1;
		}

		public int GetidentifierCount()
		{
			return DomChildCount(NodeType.Attribute, "", "identifier");
		}

		public bool Hasidentifier()
		{
			return HasDomChild(NodeType.Attribute, "", "identifier");
		}

		public SchemaString GetidentifierAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "identifier", index)));
		}

		public SchemaString Getidentifier()
		{
			return GetidentifierAt(0);
		}

		public void RemoveidentifierAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "identifier", index);
		}

		public void Removeidentifier()
		{
			while (Hasidentifier())
				RemoveidentifierAt(0);
		}

		public void Addidentifier(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "identifier", newValue.ToString());
		}

		public void InsertidentifierAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "identifier", index, newValue.ToString());
		}

		public void ReplaceidentifierAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "identifier", index, newValue.ToString());
		}
		#endregion // identifier accessor methods

		#region lang accessor methods
		public int GetlangMinCount()
		{
			return 1;
		}

		public int GetlangMaxCount()
		{
			return 1;
		}

		public int GetlangCount()
		{
			return DomChildCount(NodeType.Attribute, "", "lang");
		}

		public bool Haslang()
		{
			return HasDomChild(NodeType.Attribute, "", "lang");
		}

		public SchemaString GetlangAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "lang", index)));
		}

		public SchemaString Getlang()
		{
			return GetlangAt(0);
		}

		public void RemovelangAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "lang", index);
		}

		public void Removelang()
		{
			while (Haslang())
				RemovelangAt(0);
		}

		public void Addlang(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "lang", newValue.ToString());
		}

		public void InsertlangAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "lang", index, newValue.ToString());
		}

		public void ReplacelangAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "lang", index, newValue.ToString());
		}
		#endregion // lang accessor methods

		#region language accessor methods
		public int GetlanguageMinCount()
		{
			return 1;
		}

		public int GetlanguageMaxCount()
		{
			return 1;
		}

		public int GetlanguageCount()
		{
			return DomChildCount(NodeType.Attribute, "", "language");
		}

		public bool Haslanguage()
		{
			return HasDomChild(NodeType.Attribute, "", "language");
		}

		public SchemaString GetlanguageAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "language", index)));
		}

		public SchemaString Getlanguage()
		{
			return GetlanguageAt(0);
		}

		public void RemovelanguageAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "language", index);
		}

		public void Removelanguage()
		{
			while (Haslanguage())
				RemovelanguageAt(0);
		}

		public void Addlanguage(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "language", newValue.ToString());
		}

		public void InsertlanguageAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "language", index, newValue.ToString());
		}

		public void ReplacelanguageAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "language", index, newValue.ToString());
		}
		#endregion // language accessor methods

		#region name accessor methods
		public int GetnameMinCount()
		{
			return 1;
		}

		public int GetnameMaxCount()
		{
			return 1;
		}

		public int GetnameCount()
		{
			return DomChildCount(NodeType.Attribute, "", "name");
		}

		public bool Hasname()
		{
			return HasDomChild(NodeType.Attribute, "", "name");
		}

		public SchemaString GetnameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "name", index)));
		}

		public SchemaString Getname()
		{
			return GetnameAt(0);
		}

		public void RemovenameAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "name", index);
		}

		public void Removename()
		{
			while (Hasname())
				RemovenameAt(0);
		}

		public void Addname(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "name", newValue.ToString());
		}

		public void InsertnameAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "name", index, newValue.ToString());
		}

		public void ReplacenameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "name", index, newValue.ToString());
		}
		#endregion // name accessor methods

		#region revision accessor methods
		public int GetrevisionMinCount()
		{
			return 1;
		}

		public int GetrevisionMaxCount()
		{
			return 1;
		}

		public int GetrevisionCount()
		{
			return DomChildCount(NodeType.Attribute, "", "revision");
		}

		public bool Hasrevision()
		{
			return HasDomChild(NodeType.Attribute, "", "revision");
		}

		public revisionType GetrevisionAt(int index)
		{
			return new revisionType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "revision", index)));
		}

		public revisionType Getrevision()
		{
			return GetrevisionAt(0);
		}

		public void RemoverevisionAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "revision", index);
		}

		public void Removerevision()
		{
			while (Hasrevision())
				RemoverevisionAt(0);
		}

		public void Addrevision(revisionType newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "revision", newValue.ToString());
		}

		public void InsertrevisionAt(revisionType newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "revision", index, newValue.ToString());
		}

		public void ReplacerevisionAt(revisionType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "revision", index, newValue.ToString());
		}
		#endregion // revision accessor methods

		#region type accessor methods
		public int GettypeMinCount()
		{
			return 1;
		}

		public int GettypeMaxCount()
		{
			return 1;
		}

		public int GettypeCount()
		{
			return DomChildCount(NodeType.Attribute, "", "type");
		}

		public bool Hastype()
		{
			return HasDomChild(NodeType.Attribute, "", "type");
		}

		public typeType GettypeAt(int index)
		{
			return new typeType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "type", index)));
		}

		public typeType Gettype()
		{
			return GettypeAt(0);
		}

		public void RemovetypeAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "type", index);
		}

		public void Removetype()
		{
			while (Hastype())
				RemovetypeAt(0);
		}

		public void Addtype(typeType newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "type", newValue.ToString());
		}

		public void InserttypeAt(typeType newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "type", index, newValue.ToString());
		}

		public void ReplacetypeAt(typeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "type", index, newValue.ToString());
		}
		#endregion // type accessor methods
	}
}
