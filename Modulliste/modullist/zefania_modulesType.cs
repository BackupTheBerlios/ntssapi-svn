//
// zefania_modulesType.cs.cs
//
// This file was generated by XMLSPY 5 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Xml;
using Altova.Types;

namespace modullist
{
	public class zefania_modulesType : Altova.Node
	{
		#region Forward constructors
		public zefania_modulesType() : base() {}
		public zefania_modulesType(XmlDocument doc) : base(doc) {}
		public zefania_modulesType(XmlNode node) : base(node) {}
		public zefania_modulesType(Altova.Node node) : base(node) {}
		#endregion // Forward constructors

		#region version accessor methods
		public int GetversionMinCount()
		{
			return 1;
		}

		public int GetversionMaxCount()
		{
			return 1;
		}

		public int GetversionCount()
		{
			return DomChildCount(NodeType.Attribute, "", "version");
		}

		public bool Hasversion()
		{
			return HasDomChild(NodeType.Attribute, "", "version");
		}

		public SchemaInteger GetversionAt(int index)
		{
			return new SchemaInteger(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "version", index)));
		}

		public SchemaInteger Getversion()
		{
			return GetversionAt(0);
		}

		public void RemoveversionAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "version", index);
		}

		public void Removeversion()
		{
			while (Hasversion())
				RemoveversionAt(0);
		}

		public void Addversion(SchemaInteger newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "version", newValue.ToString());
		}

		public void InsertversionAt(SchemaInteger newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "version", index, newValue.ToString());
		}

		public void ReplaceversionAt(SchemaInteger newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "version", index, newValue.ToString());
		}
		#endregion // version accessor methods

		#region zefania_modules_list_servers accessor methods
		public int Getzefania_modules_list_serversMinCount()
		{
			return 1;
		}

		public int Getzefania_modules_list_serversMaxCount()
		{
			return 1;
		}

		public int Getzefania_modules_list_serversCount()
		{
			return DomChildCount(NodeType.Element, "", "zefania-modules-list-servers");
		}

		public bool Haszefania_modules_list_servers()
		{
			return HasDomChild(NodeType.Element, "", "zefania-modules-list-servers");
		}

		public zefania_modules_list_serversType Getzefania_modules_list_serversAt(int index)
		{
			return new zefania_modules_list_serversType(GetDomChildAt(NodeType.Element, "", "zefania-modules-list-servers", index));
		}

		public zefania_modules_list_serversType Getzefania_modules_list_servers()
		{
			return Getzefania_modules_list_serversAt(0);
		}

		public void Removezefania_modules_list_serversAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "zefania-modules-list-servers", index);
		}

		public void Removezefania_modules_list_servers()
		{
			while (Haszefania_modules_list_servers())
				Removezefania_modules_list_serversAt(0);
		}

		public void Addzefania_modules_list_servers(zefania_modules_list_serversType newValue)
		{
			AppendDomElement("", "zefania-modules-list-servers", newValue);
		}

		public void Insertzefania_modules_list_serversAt(zefania_modules_list_serversType newValue, int index)
		{
			InsertDomElementAt("", "zefania-modules-list-servers", index, newValue);
		}

		public void Replacezefania_modules_list_serversAt(zefania_modules_list_serversType newValue, int index)
		{
			ReplaceDomElementAt("", "zefania-modules-list-servers", index, newValue);
		}
		#endregion // zefania_modules_list_servers accessor methods

		#region repository accessor methods
		public int GetrepositoryMinCount()
		{
			return 1;
		}

		public int GetrepositoryMaxCount()
		{
			return 1;
		}

		public int GetrepositoryCount()
		{
			return DomChildCount(NodeType.Element, "", "repository");
		}

		public bool Hasrepository()
		{
			return HasDomChild(NodeType.Element, "", "repository");
		}

		public repositoryType GetrepositoryAt(int index)
		{
			return new repositoryType(GetDomChildAt(NodeType.Element, "", "repository", index));
		}

		public repositoryType Getrepository()
		{
			return GetrepositoryAt(0);
		}

		public void RemoverepositoryAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "repository", index);
		}

		public void Removerepository()
		{
			while (Hasrepository())
				RemoverepositoryAt(0);
		}

		public void Addrepository(repositoryType newValue)
		{
			AppendDomElement("", "repository", newValue);
		}

		public void InsertrepositoryAt(repositoryType newValue, int index)
		{
			InsertDomElementAt("", "repository", index, newValue);
		}

		public void ReplacerepositoryAt(repositoryType newValue, int index)
		{
			ReplaceDomElementAt("", "repository", index, newValue);
		}
		#endregion // repository accessor methods
	}
}
