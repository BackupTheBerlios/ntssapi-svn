//
// repositoryType.cs.cs
//
// This file was generated by XMLSPY 5 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Xml;
using Altova.Types;

namespace modullist
{
	public class repositoryType : Altova.Node
	{
		#region Forward constructors
		public repositoryType() : base() {}
		public repositoryType(XmlDocument doc) : base(doc) {}
		public repositoryType(XmlNode node) : base(node) {}
		public repositoryType(Altova.Node node) : base(node) {}
		#endregion // Forward constructors

		#region modules accessor methods
		public int GetmodulesMinCount()
		{
			return 1;
		}

		public int GetmodulesMaxCount()
		{
			return 1;
		}

		public int GetmodulesCount()
		{
			return DomChildCount(NodeType.Element, "", "modules");
		}

		public bool Hasmodules()
		{
			return HasDomChild(NodeType.Element, "", "modules");
		}

		public modulesType GetmodulesAt(int index)
		{
			return new modulesType(GetDomChildAt(NodeType.Element, "", "modules", index));
		}

		public modulesType Getmodules()
		{
			return GetmodulesAt(0);
		}

		public void RemovemodulesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "modules", index);
		}

		public void Removemodules()
		{
			while (Hasmodules())
				RemovemodulesAt(0);
		}

		public void Addmodules(modulesType newValue)
		{
			AppendDomElement("", "modules", newValue);
		}

		public void InsertmodulesAt(modulesType newValue, int index)
		{
			InsertDomElementAt("", "modules", index, newValue);
		}

		public void ReplacemodulesAt(modulesType newValue, int index)
		{
			ReplaceDomElementAt("", "modules", index, newValue);
		}
		#endregion // modules accessor methods

		#region mirrors accessor methods
		public int GetmirrorsMinCount()
		{
			return 1;
		}

		public int GetmirrorsMaxCount()
		{
			return 1;
		}

		public int GetmirrorsCount()
		{
			return DomChildCount(NodeType.Element, "", "mirrors");
		}

		public bool Hasmirrors()
		{
			return HasDomChild(NodeType.Element, "", "mirrors");
		}

		public mirrorsType GetmirrorsAt(int index)
		{
			return new mirrorsType(GetDomChildAt(NodeType.Element, "", "mirrors", index));
		}

		public mirrorsType Getmirrors()
		{
			return GetmirrorsAt(0);
		}

		public void RemovemirrorsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "mirrors", index);
		}

		public void Removemirrors()
		{
			while (Hasmirrors())
				RemovemirrorsAt(0);
		}

		public void Addmirrors(mirrorsType newValue)
		{
			AppendDomElement("", "mirrors", newValue);
		}

		public void InsertmirrorsAt(mirrorsType newValue, int index)
		{
			InsertDomElementAt("", "mirrors", index, newValue);
		}

		public void ReplacemirrorsAt(mirrorsType newValue, int index)
		{
			ReplaceDomElementAt("", "mirrors", index, newValue);
		}
		#endregion // mirrors accessor methods
	}
}
