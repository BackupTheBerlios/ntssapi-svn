//
// mirrorType.cs.cs
//
// This file was generated by XMLSPY 5 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Xml;
using Altova.Types;

namespace modullist
{
	public class mirrorType : Altova.Node
	{
		#region Forward constructors
		public mirrorType() : base() {}
		public mirrorType(XmlDocument doc) : base(doc) {}
		public mirrorType(XmlNode node) : base(node) {}
		public mirrorType(Altova.Node node) : base(node) {}
		#endregion // Forward constructors

		#region location accessor methods
		public int GetlocationMinCount()
		{
			return 1;
		}

		public int GetlocationMaxCount()
		{
			return 1;
		}

		public int GetlocationCount()
		{
			return DomChildCount(NodeType.Attribute, "", "location");
		}

		public bool Haslocation()
		{
			return HasDomChild(NodeType.Attribute, "", "location");
		}

		public locationType GetlocationAt(int index)
		{
			return new locationType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "location", index)));
		}

		public locationType Getlocation()
		{
			return GetlocationAt(0);
		}

		public void RemovelocationAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "location", index);
		}

		public void Removelocation()
		{
			while (Haslocation())
				RemovelocationAt(0);
		}

		public void Addlocation(locationType newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "location", newValue.ToString());
		}

		public void InsertlocationAt(locationType newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "location", index, newValue.ToString());
		}

		public void ReplacelocationAt(locationType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "location", index, newValue.ToString());
		}
		#endregion // location accessor methods

		#region name accessor methods
		public int GetnameMinCount()
		{
			return 1;
		}

		public int GetnameMaxCount()
		{
			return 1;
		}

		public int GetnameCount()
		{
			return DomChildCount(NodeType.Attribute, "", "name");
		}

		public bool Hasname()
		{
			return HasDomChild(NodeType.Attribute, "", "name");
		}

		public SchemaString GetnameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "name", index)));
		}

		public SchemaString Getname()
		{
			return GetnameAt(0);
		}

		public void RemovenameAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "name", index);
		}

		public void Removename()
		{
			while (Hasname())
				RemovenameAt(0);
		}

		public void Addname(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "name", newValue.ToString());
		}

		public void InsertnameAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "name", index, newValue.ToString());
		}

		public void ReplacenameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "name", index, newValue.ToString());
		}
		#endregion // name accessor methods

		#region subdomain accessor methods
		public int GetsubdomainMinCount()
		{
			return 1;
		}

		public int GetsubdomainMaxCount()
		{
			return 1;
		}

		public int GetsubdomainCount()
		{
			return DomChildCount(NodeType.Attribute, "", "subdomain");
		}

		public bool Hassubdomain()
		{
			return HasDomChild(NodeType.Attribute, "", "subdomain");
		}

		public SchemaString GetsubdomainAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "subdomain", index)));
		}

		public SchemaString Getsubdomain()
		{
			return GetsubdomainAt(0);
		}

		public void RemovesubdomainAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "subdomain", index);
		}

		public void Removesubdomain()
		{
			while (Hassubdomain())
				RemovesubdomainAt(0);
		}

		public void Addsubdomain(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "subdomain", newValue.ToString());
		}

		public void InsertsubdomainAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "subdomain", index, newValue.ToString());
		}

		public void ReplacesubdomainAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "subdomain", index, newValue.ToString());
		}
		#endregion // subdomain accessor methods

		#region suffix accessor methods
		public int GetsuffixMinCount()
		{
			return 1;
		}

		public int GetsuffixMaxCount()
		{
			return 1;
		}

		public int GetsuffixCount()
		{
			return DomChildCount(NodeType.Attribute, "", "suffix");
		}

		public bool Hassuffix()
		{
			return HasDomChild(NodeType.Attribute, "", "suffix");
		}

		public SchemaString GetsuffixAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "suffix", index)));
		}

		public SchemaString Getsuffix()
		{
			return GetsuffixAt(0);
		}

		public void RemovesuffixAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "suffix", index);
		}

		public void Removesuffix()
		{
			while (Hassuffix())
				RemovesuffixAt(0);
		}

		public void Addsuffix(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "suffix", newValue.ToString());
		}

		public void InsertsuffixAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "suffix", index, newValue.ToString());
		}

		public void ReplacesuffixAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "suffix", index, newValue.ToString());
		}
		#endregion // suffix accessor methods
	}
}
